{"version":3,"sources":["ember-ace/components/ember-ace-completion-tooltip.js","ember-ace/components/ember-ace.js","ember-ace/index.js","ember-ace/templates/components/ember-ace-completion-tooltip.js","ember-ace/templates/components/ember-ace.js","ember-ace/utils/completion-manager.js","ember-ace/worker-manifest.js"],"sourcesContent":["define('ember-ace/components/ember-ace-completion-tooltip', ['exports', 'ember-ace/templates/components/ember-ace-completion-tooltip'], function (exports, _emberAceCompletionTooltip) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Component.extend({\n    layout: _emberAceCompletionTooltip.default,\n    tagName: ''\n  });\n});","define('ember-ace/components/ember-ace', ['exports', 'ember-ace/utils/completion-manager', 'ember-ace/templates/components/ember-ace', 'ember-ace'], function (exports, _completionManager, _emberAce, _emberAce2) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Component.extend({\n    layout: _emberAce.default,\n\n    mode: undefined,\n    theme: undefined,\n    useSoftTabs: true,\n    tabSize: 2,\n    useWrapMode: false,\n    highlightActiveLine: true,\n    showPrintMargin: true,\n    printMarginColumn: 80,\n    showInvisibles: false,\n    readOnly: false,\n    showLineNumbers: true,\n    showGutter: true,\n\n    maxLines: undefined,\n    minLines: undefined,\n\n    enableDefaultAutocompletion: false,\n    enableLiveAutocompletion: undefined,\n    enableBasicAutocompletion: Ember.computed('enableDefaultAutocompletion', 'suggestCompletions', function () {\n      const enableDefault = this.get('enableDefaultAutocompletion');\n      const suggestCompletions = this.get('suggestCompletions');\n      if (enableDefault || suggestCompletions) {\n        return HAS_LANGUAGE_TOOLS || emitLanguageToolsWarning();\n      }\n    }),\n\n    lines: Ember.computed({\n      set(key, value) {\n        this.set('minLines', value);\n        this.set('maxLines', value);\n      }\n    }),\n\n    overlays: Ember.computed(() => []),\n\n    markers: Ember.computed('overlays.[]', function () {\n      const overlays = this.get('overlays') || [];\n      return overlays.map(overlay => ({\n        class: `ember-ace-${overlay.type} ${overlay.class || ''}`,\n        range: overlay.range,\n        inFront: overlay.hasOwnProperty('inFront') ? overlay.inFront : true\n      }));\n    }),\n\n    annotations: Ember.computed('overlays.[]', function () {\n      const overlays = this.get('overlays') || [];\n      return overlays.map(overlay => ({\n        type: overlay.type,\n        text: overlay.text,\n        row: overlay.range.start.row\n      }));\n    }),\n\n    init() {\n      this._super(...arguments);\n      this._silenceUpdates = false;\n    },\n\n    didInsertElement() {\n      this._super();\n      this._instantiateEditor();\n    },\n\n    willDestroyElement() {\n      this._super();\n      this._destroyEditor();\n    },\n\n    didReceiveAttrs() {\n      this._super();\n      this._syncAceProperties();\n    },\n\n    _instantiateEditor() {\n      const editor = this.editor = _emberAce2.default.edit(this.element.querySelector('[data-ember-ace]'));\n\n      this._syncAceProperties();\n\n      // Avoid a deprecation warning from Ace\n      editor.$blockScrolling = Infinity;\n      editor.completers = this._buildCompleters(editor);\n\n      const originalSetValue = editor.setValue;\n      editor.setValue = (...args) => {\n        const update = this.get('update');\n\n        // Ace implements document.setValue by first removing and then inserting,\n        // so silence regular updates here, and instead call update directly\n        this._withUpdatesSilenced(() => {\n          originalSetValue.call(editor, ...args);\n        });\n\n        if (update && !this._silenceUpdates) {\n          Ember.run(() => update(editor.session.getValue()));\n        }\n      };\n\n      editor.getSession().on('change', (event, session) => {\n        const update = this.get('update');\n\n        if (update && !this._silenceUpdates) {\n          Ember.run(() => update(session.getValue()));\n        }\n      });\n\n      if (this.get('ready')) {\n        this.get('ready')(editor);\n      }\n    },\n\n    _syncAceProperties() {\n      if (!this.editor) return;\n\n      const oldValues = this.getWithDefault('_previousAceValues', {});\n      const newValues = this.getProperties(ACE_PROPERTIES);\n\n      this.set('_previousAceValues', newValues);\n\n      // Don't trigger the update action as a result of value syncing\n      this._withUpdatesSilenced(() => {\n        Object.keys(newValues).forEach(key => {\n          if (oldValues[key] !== newValues[key]) {\n            this._syncAceProperty(key, newValues[key]);\n          }\n        });\n      });\n\n      // Render within this run loop, for consistency with Ember's normal component rendering flow\n      Ember.run.scheduleOnce('render', this, () => this.editor.renderer.updateFull(true));\n    },\n\n    _syncAceProperty(key, value) {\n      const handler = ACE_HANDLERS[key];\n      const { editor } = this;\n\n      if (handler === 'editor') {\n        editor.setOption(key, value);\n      } else if (handler === 'session') {\n        editor.session.setOption(key, value);\n      } else if (handler === 'renderer') {\n        editor.renderer.setOption(key, value);\n      } else if (typeof handler === 'function') {\n        handler.call(this, editor, value);\n      }\n    },\n\n    _withUpdatesSilenced(callback) {\n      const previous = this._silenceUpdates;\n      try {\n        this._silenceUpdates = true;\n        callback();\n      } finally {\n        this._silenceUpdates = previous;\n      }\n    },\n\n    _buildCompleters(editor) {\n      const includeDefaults = this.get('enableDefaultAutocompletion');\n      const completers = includeDefaults && editor.completers || [];\n      return [this._buildCompletionManager(), ...completers];\n    },\n\n    _buildCompletionManager() {\n      const suggestCompletions = (...params) => Ember.run(() => Ember.tryInvoke(this, 'suggestCompletions', params));\n      const renderCompletionTooltip = suggestion => {\n        Ember.run(() => this.set('suggestionToRender', suggestion));\n        const rendered = this.element.querySelector('[data-rendered-suggestion]');\n        const html = rendered ? rendered.innerHTML.trim() : null;\n        Ember.run(() => this.set('suggestionToRender', null));\n        return html;\n      };\n\n      return new _completionManager.default({ suggestCompletions, renderCompletionTooltip });\n    },\n\n    _destroyEditor() {\n      if (this.editor) {\n        const { completer } = this.editor;\n        if (completer) {\n          // autocomplete options may have been initialized without a popup ever rendering\n          if (completer.popup) {\n            completer.popup.container.remove();\n            completer.popup.destroy();\n          }\n          completer.detach();\n        }\n\n        this.editor.destroy();\n        this.editor = null;\n      }\n    }\n  });\n\n\n  const ACE_HANDLERS = Object.freeze({\n    theme: 'editor',\n    highlightActiveLine: 'editor',\n    showInvisibles: 'editor',\n    showPrintMargin: 'editor',\n    printMarginColumn: 'editor',\n    readOnly: 'editor',\n    minLines: 'editor',\n    maxLines: 'editor',\n    showLineNumbers: 'editor',\n\n    enableBasicAutocompletion: 'editor',\n    enableLiveAutocompletion: 'editor',\n\n    tabSize: 'session',\n    useSoftTabs: 'session',\n\n    showGutter: 'renderer',\n\n    markers(editor, newValue) {\n      (this._markerIds || []).forEach(id => editor.session.removeMarker(id));\n\n      if (!newValue) return;\n\n      this._markerIds = newValue.map(({ range, class: className, type = 'text', inFront = true }) => {\n        return editor.session.addMarker(range, className, type, inFront);\n      });\n    },\n\n    annotations(editor, newValue) {\n      Ember.run.schedule('render', this, () => editor.session.setAnnotations(newValue));\n    },\n\n    useWrapMode(editor, newValue) {\n      editor.session.setUseWrapMode(newValue);\n    },\n\n    mode(editor, newValue) {\n      editor.session.setMode(newValue);\n    },\n\n    value(editor, newValue) {\n      if (editor.getValue() !== newValue) {\n        editor.setValue(newValue, -1);\n      }\n    }\n  });\n\n  const ACE_PROPERTIES = Object.freeze(Object.keys(ACE_HANDLERS));\n  const HAS_LANGUAGE_TOOLS = !!_emberAce2.default.require('ace/ext/language_tools');\n\n  function emitLanguageToolsWarning() {\n    (true && Ember.warn(\"You've defined a `suggestCompletions` action, but the `language_tools` extension isn't present. \" + \"To use autocomplete, you must have `exts: ['language_tools']` in your ember-ace build config.\", false, { id: 'ember-ace.missing-language-tools' }));\n  }\n});","define('ember-ace/index', ['exports', 'ember-ace/worker-manifest'], function (exports, _workerManifest) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.TextHighlightRules = exports.TextMode = exports.Range = exports.Tokenizer = undefined;\n  exports.default = ace;\n  const Tokenizer = exports.Tokenizer = ace.require('ace/tokenizer').Tokenizer;\n  const Range = exports.Range = ace.require('ace/range').Range;\n\n  const TextMode = exports.TextMode = ace.require('ace/mode/text').Mode;\n  const TextHighlightRules = exports.TextHighlightRules = ace.require('ace/mode/text_highlight_rules').TextHighlightRules;\n\n  const config = ace.require('ace/config');\n  Object.keys(_workerManifest.default).forEach(key => {\n    config.setModuleUrl(key, _workerManifest.default[key]);\n  });\n});","define(\"ember-ace/templates/components/ember-ace-completion-tooltip\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.__esModule = true;\n  exports.default = Ember.HTMLBars.template({ \"id\": \"cXc19eID\", \"block\": \"{\\\"symbols\\\":[\\\"&default\\\"],\\\"statements\\\":[[4,\\\"if\\\",[[20,[\\\"suggestion\\\"]]],null,{\\\"statements\\\":[[0,\\\"  \\\"],[6,\\\"div\\\"],[9,\\\"data-rendered-suggestion\\\",\\\"\\\"],[7],[11,1,[[20,[\\\"suggestion\\\"]]]],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"ember-ace/templates/components/ember-ace-completion-tooltip.hbs\" } });\n});","define(\"ember-ace/templates/components/ember-ace\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.__esModule = true;\n  exports.default = Ember.HTMLBars.template({ \"id\": \"91+Tj4ZX\", \"block\": \"{\\\"symbols\\\":[\\\"&default\\\"],\\\"statements\\\":[[6,\\\"pre\\\"],[9,\\\"data-ember-ace\\\",\\\"\\\"],[10,\\\"class\\\",[18,\\\"editorClass\\\"],null],[7],[8],[0,\\\"\\\\n\\\\n\\\"],[11,1,[[25,\\\"hash\\\",null,[[\\\"completion-tooltip\\\"],[[25,\\\"component\\\",[\\\"ember-ace-completion-tooltip\\\"],[[\\\"suggestion\\\"],[[20,[\\\"suggestionToRender\\\"]]]]]]]]]],[0,\\\"\\\\n\\\"]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"ember-ace/templates/components/ember-ace.hbs\" } });\n});","define('ember-ace/utils/completion-manager', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  /**\n   * Supports Ace's interface for supplying completion information.\n   *\n   * @private\n   * @class CompletionManager\n   */\n  class CompletionManager {\n    constructor({ suggestCompletions, renderCompletionTooltip }) {\n      this._suggestCompletions = suggestCompletions;\n      this._renderCompletionTooltip = renderCompletionTooltip;\n    }\n\n    // Called by Ace when\n    getCompletions(editor, session, position, prefix, callback) {\n      const suggestCompletions = this._suggestCompletions;\n      if (!suggestCompletions) return callback(null, []);\n\n      let promise;\n      try {\n        promise = Ember.run(() => suggestCompletions(editor, session, position, prefix));\n      } catch (error) {\n        promise = Ember.RSVP.reject(error);\n      }\n\n      Ember.RSVP.resolve(promise).then(results => callback(null, results)).catch(error => callback(error));\n    }\n\n    getDocTooltip(result) {\n      result.docHTML = this._renderCompletionTooltip.call(null, result);\n    }\n  }\n  exports.default = CompletionManager;\n});","define(\"ember-ace/worker-manifest\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {};\n});"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"engine-vendor.js"}